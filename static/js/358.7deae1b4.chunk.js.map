{"version":3,"file":"static/js/358.7deae1b4.chunk.js","mappings":"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","sources":["webpack://react-homework-template/./src/components/ContactForm/ContactForm.module.css?b5b2","redux/contact-selector.js","components/ContactForm/ContactForm.jsx","webpack://react-homework-template/./src/components/Filter/Filter.module.css?fad1","components/Filter/Filter.jsx","webpack://react-homework-template/./src/components/Contact/Contact.module.css?03fd","components/Contact/Contact.jsx","components/ContactList/ContactList.jsx","pages/ContactsPage.jsx"],"sourcesContent":["// extracted by mini-css-extract-plugin\nexport default {\"form\":\"ContactForm_form__dhl+T\",\"label\":\"ContactForm_label__-cVXI\",\"input__name\":\"ContactForm_input__name__qXzWu\",\"input__data\":\"ContactForm_input__data__xgn6s\",\"add__button\":\"ContactForm_add__button__2obk5\",\"field\":\"ContactForm_field__DAXEv\",\"error__message\":\"ContactForm_error__message__9D4g9\"};","export const selectContacts = state => state.contacts.items;\n\nexport const selectIsLoading = state => state.contacts.isLoading;\n\nexport const selectError = state => state.contacts.error;\n\nexport const selectFilter = state => state.filter;\n","import React, { useState } from 'react';\n// import PropTypes from 'prop-types';\nimport css from './ContactForm.module.css';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { addContact } from '../../redux/contact-operation';\nimport { selectContacts } from '../../redux/contact-selector';\nconst ContactForm = () => {\n  //store\n\n  const dispatch = useDispatch();\n  const contacts = useSelector(selectContacts);\n  //local state onchange form\n  const [name, setName] = useState('');\n  const [number, setNumber] = useState('');\n\n  const handleChange = event => {\n    const { name, value } = event.target;\n\n    switch (name) {\n      case 'name':\n        setName(value);\n        break;\n\n      case 'number':\n        setNumber(value);\n        break;\n\n      default:\n        return;\n    }\n  };\n\n  const handleSubmit = event => {\n    event.preventDefault();\n    const dataForm = { name, number };\n\n    if (\n      contacts.some(\n        el => el.name.toLowerCase().trim() === name.toLowerCase().trim()\n      )\n    ) {\n      return alert(`Contact with name \"${name}\" is already in contacts`);\n    }\n\n    const existNumber = contacts.find(el => el.number === number);\n    if (existNumber) {\n      return alert(\n        `Contact with number ${existNumber.number} is already in  ${existNumber.name}`\n      );\n    }\n\n    dispatch(addContact(dataForm));\n\n    reset();\n  };\n\n  const reset = () => {\n    setName('');\n    setNumber('');\n  };\n\n  return (\n    <form className={css.form} onSubmit={handleSubmit} autoComplete=\"off\">\n      <label className={css.label}>\n        <span className={css.input__name}>Name</span>\n        <input\n          className={css.input__data}\n          type=\"text\"\n          name=\"name\"\n          // pattern=\"^[a-zA-Z0-9_.\\-]+[\\\\\\|\\s]?[a-zA-Z0-9_.\\-]+$\"\n          pattern=\"^[А-Яа-яЁёa-zA-Z\\s]+$\"\n          title=\"Name may contain only letters, apostrophe, dash and spaces. For example Adrian, Jacob Mercer\"\n          required\n          value={name}\n          onChange={handleChange}\n        />\n      </label>\n      <label className={css.label}>\n        <span className={css.input__name}> Phone</span>\n        <input\n          className={css.input__data}\n          type=\"tel\"\n          name=\"number\"\n          // pattern=\"^[\\+]?[(]?[0-9]{3}[)]?[-\\s\\.]?[0-9]{3}[-\\s\\.]?[0-9]{4,6}$/im\"\n          pattern=\"\\+?[0-9\\s\\-\\(\\)]+\"\n          title=\"Phone number must be digits and can contain spaces, dashes, parentheses and can start with +\"\n          required\n          value={number}\n          onChange={handleChange}\n        />\n      </label>\n\n      <button className={css.add__button} type=\"submit\">\n        Add contact\n      </button>\n    </form>\n  );\n};\n\n// ContactForm.propTypes = {\n//   onSubmit: PropTypes.func.isRequired,\n// };\n\nexport default ContactForm;\n","// extracted by mini-css-extract-plugin\nexport default {\"form\":\"Filter_form__wVnxJ\",\"label\":\"Filter_label__vEd1E\",\"input__data\":\"Filter_input__data__rSv80\"};","import React from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { selectFilter } from '../../redux/contact-selector';\nimport { filterContacts } from '../../redux/filterSlice';\nimport css from './Filter.module.css';\n// import PropTypes from 'prop-types';\n\nconst Filter = () => {\n  const dispatch = useDispatch();\n  const filter = useSelector(selectFilter);\n\n  return (\n    <form className={css.form}>\n      <label className={css.label}>\n        <span className={css.input__name}>Find contacts by name</span>\n        <input\n          className={css.input__data}\n          type=\"text\"\n          name=\"filter\"\n          pattern=\"^[А-Яа-яЁёa-zA-Z\\s]+$\"\n          title=\"Name may contain only letters, apostrophe, dash and spaces. For example Adrian, Jacob Mercer, Charles de Batz de Castelmore d'Artagnan\"\n          autoComplete=\"off\"\n          // required\n          value={filter}\n          onChange={e => dispatch(filterContacts(e.target.value))}\n        />\n      </label>\n    </form>\n  );\n};\n// Filter.propTypes = {\n//   value: PropTypes.string.isRequired,\n//   onChange: PropTypes.func.isRequired,\n// };\nexport default Filter;\n","// extracted by mini-css-extract-plugin\nexport default {\"button\":\"Contact_button__F+kJb\",\"contact\":\"Contact_contact__4zmlP\",\"number\":\"Contact_number__aT6T9\",\"name\":\"Contact_name__xbxVU\"};","import React from 'react';\n\nimport { useDispatch } from 'react-redux';\nimport { deleteContact } from '../../redux/contact-operation';\n\nimport css from './Contact.module.css';\n\nimport PropTypes from 'prop-types';\n\nconst Contact = ({ contact }) => {\n  const { id, name, number } = contact;\n  const dispatch = useDispatch();\n\n  return (\n    <li className={css.contact}>\n      <span className={css.name}>{name}:</span>\n      <span className={css.number}>{number}</span>\n      <button\n        className={css.button}\n        type=\"button\"\n        onClick={() => dispatch(deleteContact(id))}\n      >\n        Delete\n      </button>\n    </li>\n  );\n};\nContact.propTypes = {\n  contact: PropTypes.object.isRequired,\n};\nexport default Contact;\n","import React from 'react';\nimport Contact from '../Contact/Contact';\nimport { useSelector } from 'react-redux';\nimport { selectContacts, selectFilter } from '../../redux/contact-selector';\n\nconst getVisibleContacts = (contacts, filter) => {\n  const normalizedFilter = filter.toLowerCase().trim();\n  return contacts\n    .filter(contact => contact.name.toLowerCase().includes(normalizedFilter))\n    .sort((a, b) => a.name.localeCompare(b.name));\n};\n\nconst ContactList = () => {\n  const contacts = useSelector(selectContacts);\n  const filter = useSelector(selectFilter);\n  const visibleContacts = getVisibleContacts(contacts, filter);\n  // console.log('contacts', contacts);\n  // console.log('filter', filter);\n\n  return (\n    <ul>\n      {visibleContacts.map(contact => {\n        return <Contact key={contact.id} contact={contact} />;\n      })}\n    </ul>\n  );\n};\nexport default ContactList;\n","import ContactForm from '../components/ContactForm/ContactForm';\nimport Filter from '../components/Filter/Filter';\nimport ContactList from '../components/ContactList/ContactList';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { useEffect } from 'react';\n\n// import { toast } from 'react-toastify';\n\nimport {\n  selectIsLoading,\n  selectError,\n  selectContacts,\n} from 'redux/contact-selector';\nimport { fetchContacts } from 'redux/contact-operation';\n\nexport default function ContactsPage() {\n  const contacts = useSelector(selectContacts);\n  const error = useSelector(selectError);\n\n  const isLoading = useSelector(selectIsLoading);\n  const dispatch = useDispatch();\n\n  useEffect(() => {\n    dispatch(fetchContacts());\n  }, [dispatch]);\n\n  return (\n    <div>\n      <h1>Phonebook</h1>\n      <ContactForm />\n      <h2>Contacts</h2>\n\n      {contacts.length !== 0 && (\n        <>\n          <Filter />\n          <ContactList />\n        </>\n      )}\n      {error && contacts.length === 0 && <p>{error}</p>}\n      {!isLoading && !error && contacts.length === 0 && (\n        <p>\n          There is no contacts yet. Use the form above to add your first\n          contact.\n        </p>\n      )}\n      {isLoading && (\n        <>\n          <br />\n          <b>Waiting...</b>\n        </>\n      )}\n    </div>\n  );\n}\n"],"names":["selectContacts","state","contacts","items","selectIsLoading","isLoading","selectError","error","selectFilter","filter","dispatch","useDispatch","useSelector","_useState","useState","_useState2","_slicedToArray","name","setName","_useState3","_useState4","number","setNumber","handleChange","event","_event$target","target","value","reset","_jsxs","className","css","onSubmit","preventDefault","dataForm","some","el","toLowerCase","trim","alert","concat","existNumber","find","addContact","autoComplete","children","_jsx","type","pattern","title","required","onChange","e","filterContacts","_ref","contact","id","onClick","deleteContact","visibleContacts","normalizedFilter","includes","sort","a","b","localeCompare","getVisibleContacts","map","Contact","ContactsPage","useEffect","fetchContacts","ContactForm","length","_Fragment","Filter","ContactList"],"sourceRoot":""}